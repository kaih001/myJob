<template>
  <view id="pulltorefresh-view" class="pulltorefresh-view">
    <movable-area>
      <movable-view id="pulltorefresh-view-container" out-of-bounds="{{true}}" y="{{-offsetY}}" direction="vertical" bindtouchend="touchend" bindchange="change">
        <view class="header">
          <view class="header-text" wx:if="{{pullDownStatus === 0 && !disablePullDown}}">
            {{pullText}}
          </view>
          <view class="header-text" wx:if="{{pullDownStatus === 1 && !disablePullDown}}">
            {{releaseText}}
          </view>
          <view class="header-text" wx:if="{{pullDownStatus === 2 && !disablePullDown}}">
            <icon class="dm-loadmore-icon"></icon>{{loadingText}}
          </view>
          <view class="header-text" wx:if="{{pullDownStatus === 3 && !disablePullDown}}">
            {{finishText}}
          </view>
        </view>
        <scroll-view
          class="body"
          scroll-y
          scroll-with-animation
          scroll-top="{{scrollTop}}"
          bindscroll="handleScroll"
          bindscrolltolower="bindLoadMore">
          <slot></slot>
        </scroll-view>
      </movable-view>
    </movable-area>
  </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'

createComponent({
  properties: {
    pullText: {
      type: String,
      value: '下拉可以刷新',
    },
    releaseText: {
      type: String,
      value: '松开立即刷新',
    },
    loadingText: {
      type: String,
      value: '正在刷新数据中',
    },
    finishText: {
      type: String,
      value: '刷新完成',
    },
    pullUpText: {
      type: String,
      value: '上拉加载更多',
    },
    pullUpReleaseText: {
      type: String,
      value: '松开立即加载',
    },
    loadmoreText: {
      type: String,
      value: '正在加载更多数据',
    },
    loadmoreFinishText: {
      type: String,
      value: '加载完成',
    },
    nomoreText: {
      type: String,
      value: '已经全部加载完毕',
    },
    refreshing: {
      type: Boolean,
      value: false,
      observer: 'refreshingChange',
    },
    nomore: {
      type: Boolean,
      value: false,
    },
    disablePullDown: {
      type: Boolean,
      value: false,
    },
    disablePullUp: {
      type: Boolean,
      value: false,
    },
  },
  data: {
    pullDownStatus: 0,
    pullUpStatus: 0,
    offsetY: 40,
    isOutBound: false,
    eventName: '',
    scrollTop: 0,
    cacheScrollTop: 0
  },
  methods: {
    scrollToBottom: function () {
      const query = this.createSelectorQuery()
      query.select('#pulltorefresh-view-container').boundingClientRect()
      query.exec(function (res) {
        const innerHeight = res[0].height
        query.select('#pulltorefresh-view').boundingClientRect()
        query.exec(function (res) {
          const outerHeight = res[0].height
          this.setData({
            pullUpStatus: 3,
            offsetY: -(innerHeight - outerHeight - 40),
          })
          setTimeout(function () {
            this.setData({
              pullUpStatus: 0,
            })
          }.bind(this), 500)
        }.bind(this))
      }.bind(this))
    },
    handleScroll: function (evt) {
      this.triggerEvent('scroll', evt.detail)
    },
    bindLoadMore: function (evt) {
      this.triggerEvent('scrolltolower', evt.detail)
    },
    touchend: function (e) {
      if (this.data.isOutBound && this.data.offsetY > 40 && !this.properties.disablePullDown) {
        this.setData({
          pullDownStatus: 2,
          eventName: 'pulldownrefresh',
        })
        this.triggerEvent('pulldownrefresh')
      } else if (this.data.isOutBound && this.data.offsetY < 40 && !this.properties.disablePullUp) {
        if (this.properties.nomore) {
          this.scrollToBottom()
        } else {
          this.setData({
            pullUpStatus: 2,
            eventName: 'loadmore',
          })
          this.triggerEvent('loadmore')
        }
      } else {
        this.setData({
          offsetY: 40,
          pullDownStatus: 0,
        })
      }
      setTimeout(() => {
        this.setData({
          offsetY: 40,
          pullDownStatus: 0,
        })
      }, 1000)
    },
    change: function (e) {
      if (this.properties.refreshing) return
      this.data.isOutBound = e.detail.source == 'touch-out-of-bounds'
      this.data.offsetY = e.detail.y + 40
      if (this.data.isOutBound) {
        if (this.data.offsetY > 40) {
          this.setData({
            pullDownStatus: 1,
          })
        } else {
          this.setData({
            pullUpStatus: 1,
          })
        }
      } else if ((this.data.pullDownStatus != 0 && this.data.pullDownStatus != 3) || (this.data.pullUpStatus != 0 && this.data.pullUpStatus != 3)) {
        setTimeout(() => {
          this.setData({
            pullDownStatus: 0,
            pullUpStatus: 0,
          })
        }, 1000)
      }
      if (this.data.isOutBound && this.data.offsetY > 40 && this.data.pullDownStatus == 0) {
        this.setData({
          pullDownStatus: 1,
        })
      } else if (this.data.offsetY <= 40 && this.data.pullDownStatus == 1) {
        this.setData({
          pullDownStatus: 0,
        })
      }
    },
    reSetScrollTop: function () {
      this.setData({
        scrollTop: 0,
        offsetY: 40,
        pullDownStatus: 0,
      })
    },
    refreshingChange: function (newVal, oldVal) {
      if (oldVal === true && newVal === false) {
        if (this.data.eventName == 'pulldownrefresh') {
          this.setData({
            offsetY: 40,
            pullDownStatus: 3,
          })
          setTimeout(() => {
            this.setData({
              pullDownStatus: 0,
            })
          }, 500)
        } else if (this.data.eventName == 'loadmore') {
          this.scrollToBottom()
        }
      }
    },
  },
})
</script>
<style lang="stylus">
.dm-loadmore-icon {
  display: inline-block;
  width: 20px;
  height: 20px;
  background: url('https://cdn.doumistatic.com/34,6380e6b42a3bc0.png') no-repeat;
  background-size: 20px auto;
  vertical-align: middle;
  margin-right: 8px;
  animation: spin 0.9s infinite linear;
}
</style>
<style>
.pulltorefresh-view {
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

movable-area {
  height: 100%;
  width: 100%;
}

movable-view {
  height: calc(100% + 80px);
  width: 100%;
}

.pulltorefresh-view .header {
  height: 40px;
}

.pulltorefresh-view .header-text {
  height: 40px;
  margin: 0px auto;
  line-height: 40px;
  text-align: center;
}

.pulltorefresh-view .body {
  height: calc(100% - 80px);
}

.pulltorefresh-view .loadmore {
  height: 40px;
}

.pulltorefresh-view .loadmore view {
  height: 40px;
  margin: 0px auto;
  line-height: 40px;
  text-align: center;
}

.loading {
  display: inline-block;
  transform-origin: 50% 50%;
}

.iconfont {
  font-family:"iconfont" !important;
  font-size:16px;
  font-style:normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-release-up:before { content: "\e987"; }

.icon-complete:before { content: "\e992"; }

.icon-pull-down:before { content: "\e996"; }

.icon-loading:before { content: "\e9ac"; }
</style>

<script type="application/json">
  {
    "component": true
  }
</script>
